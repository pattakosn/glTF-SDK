#!/bin/sh

# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License.

# Auto-generates the C/C++ header for the JSON glTF schema as a pre-build step.
# Refer to https://github.com/KhronosGroup/glTF/tree/2.0/specification/2.0/schema
#
# Uses the JSON schemas defined in the JSON files in $SCHEMAS_PATH
# to auto-generate the C/C++ header file for use in the glTFSDK.

set -e  # Exit on error

# Check if output path is provided
if [ $# -eq 0 ]; then
    echo "Error: Output path is required"
    echo "Usage: $0 <output_path>"
    exit 1
fi

OUT_PATH="$1"

# Create output directory if it doesn't exist
mkdir -p "$OUT_PATH"

# Header file name and path
HEADER_FILE_NAME="SchemaJson.h"
HEADER_FILE="$OUT_PATH/$HEADER_FILE_NAME"

# Schema directory path
SCHEMAS_PATH="./schema"

# Working directory
WORKING_DIR="../GLTFSDK"

# Textual constants for use in the header file
COPYRIGHT_NOTICE="// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License."

SCRIPT_NAME=$(basename "$0")
AUTOGENERATED_CODE_WARNING="// WARNING: This header file was automatically generated
// by $SCRIPT_NAME.
// Modifying this code by hand is not recommended."

HEADER_GUARD="#pragma once"
MS_NAMESPACE="namespace Microsoft"
GLTF_NAMESPACE="namespace glTF"
CLASS_NAME="SchemaJson"

# Global indent level
GLOBAL_INDENT_LEVEL=0

# Returns indentation string (2 spaces per level)
get_indent() {
    level="$1"
    spaces=$((level * 2))
    printf '%*s' "$spaces" ''
}

# Appends to header file with specified indent level
append_to_header() {
    text="$1"
    indent_level="$2"
    indent=$(get_indent "$indent_level")
    printf "%s%s\n" "$indent" "$text" >> "$HEADER_FILE"
}

# Opens a new scope
open_scope() {
    name="$1"
    append_to_header "$name {" "$GLOBAL_INDENT_LEVEL"
    GLOBAL_INDENT_LEVEL=$((GLOBAL_INDENT_LEVEL + 1))
}

# Closes a scope
close_scope() {
    name="$1"
    GLOBAL_INDENT_LEVEL=$((GLOBAL_INDENT_LEVEL - 1))
    append_to_header "}; // end $name scope" "$GLOBAL_INDENT_LEVEL"
}

# Adds public class modifier
add_public_modifier() {
    append_to_header "public:" "$GLOBAL_INDENT_LEVEL"
}

# Adds includes
add_includes() {
    append_to_header "#include <string>" 0
    append_to_header "#include <unordered_map>" 0
}

# Wraps text in C++ raw string literal
wrap_in_raw_string_tag() {
    text="$1"
    printf 'R"rawstring(%s)rawstring"' "$text"
}

# Declares a static const char* const variable
declare_static_const_ptr_to_const_char() {
    var_name="$1"
    printf "static const char* const %s;" "$var_name"
}

# Defines a const char* const variable
define_static_const_ptr_to_const_char() {
    var_scope="$1"
    var_name="$2"
    var_value="$3"
    printf "const char* const %s::%s = %s;" "$var_scope" "$var_name" "$var_value"
}

# Declares GLTF_SCHEMA_MAP variable
declare_gltf_schema_vars() {
    mapvar="static const std::unordered_map<std::string, std::string> GLTF_SCHEMA_MAP;"
    append_to_header "$mapvar" "$GLOBAL_INDENT_LEVEL"
}

# Defines GLTF_SCHEMA_MAP variable
define_gltf_schema_vars() {
    var_scope="$1"
    shift

    indent=$(get_indent "$GLOBAL_INDENT_LEVEL")

    append_to_header "const std::unordered_map<std::string, std::string> ${var_scope}::GLTF_SCHEMA_MAP =" "$GLOBAL_INDENT_LEVEL"
    append_to_header "{" "$GLOBAL_INDENT_LEVEL"

    total=$#
    count=0

    for name in "$@"; do
        count=$((count + 1))
        new_name=$(echo "$name" | sed 's/\./_/g')
        punctuation=","
        if [ "$count" -eq "$total" ]; then
            punctuation=" };"
        fi
        append_to_header "    { \"$name\", $new_name }${punctuation}" "$GLOBAL_INDENT_LEVEL"
    done
}

# Print colored message (if terminal supports it)
print_message() {
    if [ -t 1 ]; then
        # Terminal supports colors
        printf "\033[35m%s\033[0m\n" "$1"
    else
        printf "%s\n" "$1"
    fi
}

print_message "Beginning generation of SchemaJson.h..."

# Change to working directory
cd "$WORKING_DIR" || exit 1

# Delete existing header file
rm -f "$HEADER_FILE"

# Write header file header
append_to_header "$COPYRIGHT_NOTICE" "$GLOBAL_INDENT_LEVEL"
append_to_header "$AUTOGENERATED_CODE_WARNING" "$GLOBAL_INDENT_LEVEL"
append_to_header "$HEADER_GUARD" "$GLOBAL_INDENT_LEVEL"

add_includes

open_scope "$MS_NAMESPACE"
open_scope "$GLTF_NAMESPACE"

open_scope "class $CLASS_NAME"
add_public_modifier

# Create temporary file for storing map names
tmp_names=$(mktemp)
trap 'rm -f "$tmp_names"' EXIT

# Find all JSON files and process them (sorted)
find "$SCHEMAS_PATH" -type f -name "*.json" | sort | while IFS= read -r json_file; do
    # Get the basename
    basename=$(basename "$json_file")

    # Add to map names file
    echo "$basename" >> "$tmp_names"

    # Create variable name (replace . with _)
    var_name=$(echo "$basename" | sed 's/\./_/g')

    # Declare variable
    var_text=$(declare_static_const_ptr_to_const_char "$var_name")
    append_to_header "$var_text" "$GLOBAL_INDENT_LEVEL"
done

declare_gltf_schema_vars

close_scope "class $CLASS_NAME"

# Define all the variables
find "$SCHEMAS_PATH" -type f -name "*.json" | sort | while IFS= read -r json_file; do
    basename=$(basename "$json_file")
    var_name=$(echo "$basename" | sed 's/\./_/g')

    # Read and format content with proper indentation
    content=$(printf "\n"; sed 's/^/  /' "$json_file")

    # Create raw string literal
    raw_string=$(wrap_in_raw_string_tag "$content")

    # Define variable
    var_text=$(define_static_const_ptr_to_const_char "$CLASS_NAME" "$var_name" "$raw_string")
    append_to_header "$var_text" "$GLOBAL_INDENT_LEVEL"
done

# Define GLTF_SCHEMA_MAP
map_names=$(cat "$tmp_names")
# shellcheck disable=SC2086
define_gltf_schema_vars "$CLASS_NAME" $map_names

close_scope "$GLTF_NAMESPACE"
close_scope "$MS_NAMESPACE"

print_message "Successfully generated SchemaJson.h."
